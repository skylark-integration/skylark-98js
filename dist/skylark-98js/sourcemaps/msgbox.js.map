{"version":3,"sources":["msgbox.js"],"names":["define","$","win98js","$Window","chord_audio","Audio","window","showMessageBox","title","defaultMessageBoxTitle","message","messageHTML","buttons","label","value","default","iconID","windowOptions","$window","$message","promise","Promise","resolve","reject","Object","assign","resizable","innerWidth","maximizeButton","minimizeButton","css","textAlign","fontFamily","fontSize","marginTop","flex","minWidth","whiteSpace","html","text","wordWrap","append","attr","margin","display","flexDirection","appendTo","$content","button","$button","$Button","action","close","addClass","focus","setTimeout","height","on","event","currentTarget","removeClass","center","play","error","console","log","src","alert"],"mappings":";;;;;;;AAAAA,QACC,iBACA,UACA,oBACC,SAASC,EAAEC,EAAQC,GAQpB,IAAIC,EAAc,IAAIC,MAAM,oBAE5BC,OAAOC,eAAiBD,OAAOC,gBAAkB,GAChDC,MAAAA,EAAQF,OAAOG,wBAAkC,QACjDC,QAAAA,EACAC,YAAAA,EACAC,QAAAA,IAAaC,MAAO,KAAMC,MAAO,KAAMC,SAAS,IAChDC,OAAAA,EAAS,UACTC,cAAAA,SAEA,IAAIC,EAASC,EACb,MAAMC,EAAU,IAAIC,QAAQ,CAACC,EAASC,KACrCL,EAAU,IAAIf,EAAQqB,OAAOC,QAC5BjB,MAAAA,EACAkB,WAAW,EACXC,WAAY,IACZC,gBAAgB,EAChBC,gBAAgB,GACdZ,IAEHE,EACClB,EAAE,SAAS6B,KACVC,UAAW,OACXC,WAAY,mCACZC,SAAU,OACVC,UAAW,OACXC,KAAM,EACNC,SAAU,EACVC,WAAY,WAEV1B,EACHQ,EAASmB,KAAK3B,GACJD,GACVS,EAASoB,KAAK7B,GAASoB,KACtBO,WAAY,WACZG,SAAU,eAGZvC,EAAE,SAASwC,OACVxC,EAAE,gCAAgCyC,KAAK,4BAA6B1B,oBAAyBc,KAC5Fa,OAAQ,OACRC,QAAS,UAEVzB,GACCW,KACDc,QAAS,OACTC,cAAe,QACbC,SAAS5B,EAAQ6B,UAEpB7B,EAAQ6B,SAASjB,KAChBC,UAAW,WAEZ,IAAK,MAAMiB,KAAUpC,EAAS,CAC7B,MAAMqC,EAAU/B,EAAQgC,QAAQF,EAAOnC,MAAO,KAC7CmC,EAAOG,QAAUH,EAAOG,SACxB7B,EAAQ0B,EAAOlC,OACfI,EAAQkC,UAELJ,EAAOjC,UACVkC,EAAQI,SAAS,WACjBJ,EAAQK,QACRC,WAAW,IAAMN,EAAQK,QAAS,IAEnCL,EAAQnB,KACPM,SAAU,GACVoB,OAAQ,GACRb,OAAQ,aAGVzB,EAAQuC,GAAG,UAAW,SAAWC,IAChCzD,EAAEyD,EAAMC,eAAeN,SAAS,aAEjCnC,EAAQuC,GAAG,WAAY,SAAWC,IACjCzD,EAAEyD,EAAMC,eAAeC,YAAY,aAEpC1C,EAAQuC,GAAG,SAAU,KACpBnC,EAAQ,YAETJ,EAAQ2C,WAETzC,EAAQF,QAAUA,EAClBE,EAAQD,SAAWA,EACnBC,EAAQA,QAAUA,EAClB,IACChB,EAAY0D,OACX,MAAOC,GACRC,QAAQC,sBAAsB7D,EAAY8D,QAASH,GAEpD,OAAO3C,IAGRd,OAAO6D,MAAQ,CAACzD,IACfH,gBAAiBG,QAAAA","file":"../msgbox.js","sourcesContent":["define([\n\t\"skylark-jquery\",\n\t\"./win98\",\n\t\"./os-gui/$Window\"\n],function($,win98js,$Window){\n\t// Prefer a function injected from outside an iframe,\n\t// which will make dialogs that can go outside the iframe.\n\t// Note that this API must be kept in sync with the version in jspaint.\n\n\t// Note `defaultMessageBoxTitle` handling in make_iframe_window\n\t// Any other default parameters need to be handled there (as it works now)\n\n\tvar chord_audio = new Audio(\"/audio/CHORD.WAV\");\n\n\twindow.showMessageBox = window.showMessageBox || (({\n\t\ttitle = window.defaultMessageBoxTitle /*??*/ ||  \"Alert\",\n\t\tmessage,\n\t\tmessageHTML,\n\t\tbuttons = [{ label: \"OK\", value: \"ok\", default: true }],\n\t\ticonID = \"warning\", // \"error\", \"warning\", \"info\", or \"nuke\" for deleting files/folders\n\t\twindowOptions = {}, // for controlling width, etc.\n\t}) => {\n\t\tlet $window, $message;\n\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\t$window = new $Window(Object.assign({\n\t\t\t\ttitle,\n\t\t\t\tresizable: false,\n\t\t\t\tinnerWidth: 400,\n\t\t\t\tmaximizeButton: false,\n\t\t\t\tminimizeButton: false,\n\t\t\t}, windowOptions));\n\t\t\t// $window.addClass(\"dialog-window horizontal-buttons\");\n\t\t\t$message =\n\t\t\t\t$(\"<div>\").css({\n\t\t\t\t\ttextAlign: \"left\",\n\t\t\t\t\tfontFamily: \"MS Sans Serif, Arial, sans-serif\",\n\t\t\t\t\tfontSize: \"14px\",\n\t\t\t\t\tmarginTop: \"22px\",\n\t\t\t\t\tflex: 1,\n\t\t\t\t\tminWidth: 0, // Fixes hidden overflow, see https://css-tricks.com/flexbox-truncated-text/\n\t\t\t\t\twhiteSpace: \"normal\", // overriding .window:not(.squish)\n\t\t\t\t});\n\t\t\tif (messageHTML) {\n\t\t\t\t$message.html(messageHTML);\n\t\t\t} else if (message) { // both are optional because you may populate later with dynamic content\n\t\t\t\t$message.text(message).css({\n\t\t\t\t\twhiteSpace: \"pre-wrap\",\n\t\t\t\t\twordWrap: \"break-word\",\n\t\t\t\t});\n\t\t\t}\n\t\t\t$(\"<div>\").append(\n\t\t\t\t$(\"<img width='32' height='32'>\").attr(\"src\", `../../images/icons/${iconID}-32x32-8bpp.png`).css({\n\t\t\t\t\tmargin: \"16px\",\n\t\t\t\t\tdisplay: \"block\",\n\t\t\t\t}),\n\t\t\t\t$message\n\t\t\t).css({\n\t\t\t\tdisplay: \"flex\",\n\t\t\t\tflexDirection: \"row\",\n\t\t\t}).appendTo($window.$content);\n\n\t\t\t$window.$content.css({\n\t\t\t\ttextAlign: \"center\",\n\t\t\t});\n\t\t\tfor (const button of buttons) {\n\t\t\t\tconst $button = $window.$Button(button.label, () => {\n\t\t\t\t\tbutton.action && button.action(); // API may be required for using user gesture requiring APIs\n\t\t\t\t\tresolve(button.value);\n\t\t\t\t\t$window.close(); // actually happens automatically\n\t\t\t\t});\n\t\t\t\tif (button.default) {\n\t\t\t\t\t$button.addClass(\"default\");\n\t\t\t\t\t$button.focus();\n\t\t\t\t\tsetTimeout(() => $button.focus(), 0); // @TODO: why is this needed? does it have to do with the iframe window handling?\n\t\t\t\t}\n\t\t\t\t$button.css({\n\t\t\t\t\tminWidth: 75,\n\t\t\t\t\theight: 23,\n\t\t\t\t\tmargin: \"16px 2px\",\n\t\t\t\t});\n\t\t\t}\n\t\t\t$window.on(\"focusin\", \"button\", (event) => {\n\t\t\t\t$(event.currentTarget).addClass(\"default\");\n\t\t\t});\n\t\t\t$window.on(\"focusout\", \"button\", (event) => {\n\t\t\t\t$(event.currentTarget).removeClass(\"default\");\n\t\t\t});\n\t\t\t$window.on(\"closed\", () => {\n\t\t\t\tresolve(\"closed\"); // or \"cancel\"? do you need to distinguish?\n\t\t\t});\n\t\t\t$window.center();\n\t\t});\n\t\tpromise.$window = $window;\n\t\tpromise.$message = $message;\n\t\tpromise.promise = promise; // for easy destructuring\n\t\ttry {\n\t\t\tchord_audio.play();\n\t\t} catch (error) {\n\t\t\tconsole.log(`Failed to play ${chord_audio.src}: `, error);\n\t\t}\n\t\treturn promise;\n\t});\n\n\twindow.alert = (message) => {\n\t\tshowMessageBox({ message });\n\t};\n\n});"]}