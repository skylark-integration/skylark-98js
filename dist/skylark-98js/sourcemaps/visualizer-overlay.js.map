{"version":3,"sources":["visualizer-overlay.js"],"names":["define","$","win98js","window","monkey_patch_render","obj","render","[object Object]","visualizerCanvas","renderOptions","this","wrappyCanvas","document","createElement","wrappyCtx","getContext","overlayCanvases","animateFns","audio","renderer","windowEl","canvas","ctx","style","position","left","top","pointerEvents","mixBlendMode","willChange","className","appendChild","push","options","clearRect","width","height","scale","classList","contains","devicePixelRatio","clientWidth","clientHeight","stuff","querySelectorAll","Array","from","map","el","element","area","filter","sort","a","b","forEach","offsetLeft","offsetTop","fromElement","offsetParent","getOffset","save","translate","stretch","drawImage","globalCompositeOperation","globalAlpha","fillStyle","fillRect","restore","mirror","tile","xi","yi","fn","remove","fadeOut","addEventListener","cleanUp","transition","opacity"],"mappings":"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","file":"../visualizer-overlay.js","sourcesContent":["define([\n\t\"skylark-jquery\",\n\t\"./win98\"\n],function($,win98js){\n\tfunction getOffset(element, fromElement) {\n\t\tlet el = element,\n\t\t\toffsetLeft = 0,\n\t\t\toffsetTop = 0;\n\n\t\tdo {\n\t\t\toffsetLeft += el.offsetLeft;\n\t\t\toffsetTop += el.offsetTop;\n\n\t\t\tel = el.offsetParent;\n\t\t} while (el && el !== fromElement);\n\n\t\treturn { offsetLeft, offsetTop };\n\t}\n\n\twindow.monkey_patch_render = (obj) => obj.render();\n\n\tclass VisualizerOverlay {\n\t\tconstructor(visualizerCanvas, renderOptions) {\n\t\t\tthis.visualizerCanvas = visualizerCanvas;\n\n\t\t\tthis.wrappyCanvas = document.createElement(\"canvas\");\n\t\t\tthis.wrappyCtx = this.wrappyCanvas.getContext(\"2d\");\n\n\t\t\tthis.overlayCanvases = [];\n\t\t\tthis.animateFns = [];\n\n\t\t\twindow.monkey_patch_render = (obj) => {\n\t\t\t\t// check for Butterchurn's Visualizer class\n\t\t\t\tif (obj.audio && obj.renderer) {\n\t\t\t\t\tobj.render();\n\t\t\t\t\tthis.render(renderOptions);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn obj.render();\n\t\t\t};\n\t\t}\n\n\t\tmakeOverlayCanvas(windowEl) {\n\t\t\tconst canvas = document.createElement(\"canvas\");\n\t\t\tconst ctx = canvas.getContext(\"2d\");\n\t\t\tcanvas.style.position = \"absolute\";\n\t\t\tcanvas.style.left = \"0\";\n\t\t\tcanvas.style.top = \"0\";\n\t\t\tcanvas.style.pointerEvents = \"none\";\n\t\t\tcanvas.style.mixBlendMode = \"color-dodge\";\n\t\t\tcanvas.style.willChange = \"opacity\"; // hint fixes flickering in chrome\n\t\t\tcanvas.className = \"visualizer-overlay-canvas\";\n\t\t\twindowEl.appendChild(canvas);\n\t\t\tthis.overlayCanvases.push(canvas);\n\t\t\tthis.animateFns.push(options => {\n\t\t\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\t\t\tconst scale =\n\t\t\t\t\t(windowEl.classList.contains(\"doubled\") ? 2 : 1) *\n\t\t\t\t\t(window.devicePixelRatio || 1);\n\t\t\t\tif (\n\t\t\t\t\tcanvas.width !== windowEl.clientWidth * scale ||\n\t\t\t\t\tcanvas.height !== windowEl.clientHeight * scale\n\t\t\t\t) {\n\t\t\t\t\tcanvas.width = windowEl.clientWidth * scale;\n\t\t\t\t\tcanvas.height = windowEl.clientHeight * scale;\n\t\t\t\t}\n\t\t\t\tcanvas.style.width = windowEl.clientWidth + \"px\";\n\t\t\t\tcanvas.style.height = windowEl.clientHeight + \"px\";\n\t\t\t\tconst stuff = windowEl.querySelectorAll(\"*\");\n\t\t\t\tArray.from(stuff)\n\t\t\t\t\t.map(el => {\n\t\t\t\t\t\tconst width = el.clientWidth;\n\t\t\t\t\t\tconst height = el.clientHeight;\n\t\t\t\t\t\tconst area = width * height;\n\t\t\t\t\t\treturn { element: el, width, height, area };\n\t\t\t\t\t})\n\t\t\t\t\t.filter(({ area }) => area > 0)\n\t\t\t\t\t.sort((a, b) => b.area - a.area)\n\t\t\t\t\t.forEach(({ element, width, height, area }) => {\n\t\t\t\t\t\tconst { offsetLeft, offsetTop } = getOffset(element, windowEl);\n\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\tctx.scale(scale, scale);\n\t\t\t\t\t\tctx.translate(offsetLeft, offsetTop);\n\t\t\t\t\t\tif (options.stretch) {\n\t\t\t\t\t\t\tctx.drawImage(this.wrappyCanvas, 0, 0, width, height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.drawImage(\n\t\t\t\t\t\t\t\tthis.wrappyCanvas,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t\t\theight,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t\t\theight\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (area < 30 * 30) {\n\t\t\t\t\t\t\tctx.globalCompositeOperation = \"destination-out\";\n\t\t\t\t\t\t\tctx.globalAlpha = 0.5;\n\t\t\t\t\t\t\tctx.fillStyle = \"black\";\n\t\t\t\t\t\t\tctx.fillRect(0, 0, width, height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trender(options) {\n\t\t\tconst { visualizerCanvas, wrappyCanvas, wrappyCtx, animateFns } = this;\n\t\t\tconst { width, height } = visualizerCanvas;\n\t\t\tif (options.mirror) {\n\t\t\t\tconst drawImage = () => {\n\t\t\t\t\twrappyCtx.drawImage(\n\t\t\t\t\t\tvisualizerCanvas,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\twidth,\n\t\t\t\t\t\theight,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\twidth,\n\t\t\t\t\t\theight\n\t\t\t\t\t);\n\t\t\t\t\t// zoom in the source area:\n\t\t\t\t\t// wrappyCtx.drawImage(visualizerCanvas, width/4, height/4, width/2, height/2, 0, 0, width, height);\n\t\t\t\t\t// wrappyCtx.drawImage(visualizerCanvas, width/4, height/4, width/4, height/4, 0, 0, width, height);\n\t\t\t\t\t// for testing:\n\t\t\t\t\t// wrappyCtx.fillStyle = \"aqua\";\n\t\t\t\t\t// wrappyCtx.fillRect(0, 0, width, height);\n\t\t\t\t};\n\t\t\t\twrappyCanvas.width = width * 2;\n\t\t\t\twrappyCanvas.height = height * 2;\n\t\t\t\twrappyCtx.save();\n\t\t\t\tdrawImage();\n\t\t\t\twrappyCtx.translate(0, height);\n\t\t\t\twrappyCtx.scale(1, -1);\n\t\t\t\twrappyCtx.translate(0, -height);\n\t\t\t\tdrawImage();\n\t\t\t\twrappyCtx.translate(width, 0);\n\t\t\t\twrappyCtx.scale(-1, 1);\n\t\t\t\twrappyCtx.translate(-width, 0);\n\t\t\t\tdrawImage();\n\t\t\t\twrappyCtx.translate(0, height);\n\t\t\t\twrappyCtx.scale(1, -1);\n\t\t\t\twrappyCtx.translate(0, -height);\n\t\t\t\tdrawImage();\n\t\t\t\twrappyCtx.restore();\n\t\t\t} else if (options.tile) {\n\t\t\t\twrappyCanvas.width = width * 2;\n\t\t\t\twrappyCanvas.height = height * 2;\n\t\t\t\tfor (let xi = 0; xi < 2; xi++) {\n\t\t\t\t\tfor (let yi = 0; yi < 2; yi++) {\n\t\t\t\t\t\twrappyCtx.drawImage(\n\t\t\t\t\t\t\tvisualizerCanvas,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t\theight,\n\t\t\t\t\t\t\twidth * xi,\n\t\t\t\t\t\t\theight * yi,\n\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t\theight\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twrappyCanvas.width = width;\n\t\t\t\twrappyCanvas.height = height;\n\t\t\t\twrappyCtx.drawImage(visualizerCanvas, 0, 0, width, height);\n\t\t\t}\n\n\t\t\tanimateFns.forEach(fn => fn(options));\n\t\t}\n\t\tcleanUp() {\n\t\t\tthis.overlayCanvases.forEach(canvas => {\n\t\t\t\tcanvas.remove();\n\t\t\t});\n\t\t\twindow.monkey_patch_render = (obj) => obj.render();\n\t\t}\n\t\tfadeOutAndCleanUp() {\n\t\t\tthis.fadeOut();\n\t\t\tthis.overlayCanvases[0].addEventListener(\"transitionend\", () => {\n\t\t\t\tthis.cleanUp();\n\t\t\t});\n\t\t}\n\t\tfadeOut() {\n\t\t\tthis.overlayCanvases.forEach(canvas => {\n\t\t\t\tcanvas.style.transition =\n\t\t\t\t\t\"opacity 1s cubic-bezier(0.125, 0.960, 0.475, 0.915)\";\n\t\t\t\tcanvas.style.opacity = \"0\";\n\t\t\t});\n\t\t}\n\t\tfadeIn() {\n\t\t\tthis.overlayCanvases.forEach(canvas => {\n\t\t\t\tcanvas.style.transition = \"opacity 0.2s ease\";\n\t\t\t\tcanvas.style.opacity = \"1\";\n\t\t\t});\n\t\t}\n\t}\n\n\n\treturn VisualizerOverlay;\n});"]}